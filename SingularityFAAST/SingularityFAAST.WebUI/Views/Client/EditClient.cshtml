
@model SingularityFAAST.Core.ViewModels.EditClientViewModel

@*@model SingularityFAAST.Core.Entities.Client*@


@{
    ViewBag.Title = "EditClient";
}

<h2>View/Edit Client Details</h2>

@using (Html.BeginForm())
{



    <div class="row">

        @Html.HiddenFor(x=>x.Client.ClientID)   @*x can be used*@
                                                                   

        <div class="col-md-4">
            <div class="form-group">
                @Html.LabelFor(viewModel => viewModel.Client.Title)     @*was: client => client.Title*@
                @Html.TextBoxFor(viewModel => viewModel.Client.Title, new { @class = "form-control" }) 
            </div>
        </div>



        <div class="col-md-4">
            <div class="form-group">
                @Html.LabelFor(viewModel => viewModel.Client.Company)
                @Html.TextBoxFor(viewModel => viewModel.Client.Company, new { @class = "form-control" })
            </div>
        </div>
    </div>


        <div class="row">
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(viewModel => viewModel.Client.FirstName, "First Name")
                    @Html.TextBoxFor(viewModel => viewModel.Client.FirstName, new { @class = "form-control" })
                </div>
            </div>

            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(viewModel => viewModel.Client.MiddleInitial, "Middle Initial")
                    @Html.TextBoxFor(viewModel => viewModel.Client.MiddleInitial, new { @class = "form-control" })
                </div>
            </div>

            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(viewModel => viewModel.Client.LastName, "Last Name")
                    @Html.TextBoxFor(viewModel => viewModel.Client.LastName, new { @class = "form-control" })
                </div>
            </div>
        </div>


        <div class="row">
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(viewModel => viewModel.Client.Address1, "Address")
                    @Html.TextBoxFor(viewModel => viewModel.Client.Address1, new { @class = "form-control" })
                </div>
            </div>

            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(viewModel => viewModel.Client.Address2, "Address")
                    @Html.TextBoxFor(viewModel=>viewModel.Client.Address2, new { @class = "form-control" })
                </div>
            </div>

            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(viewModel=>viewModel.Client.City)
                    @Html.TextBoxFor(viewModel=>viewModel.Client.City, new { @class = "form-control" })
                </div>
            </div>
        </div>



        <div class="row">
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(viewModel=>viewModel.Client.StateName, "State Name")
                    @Html.TextBoxFor(viewModel=>viewModel.Client.StateName, new { @class = "form-control" })
                </div>
            </div>

            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(viewModel=>viewModel.Client.StateCode, "State Code")
                    @Html.TextBoxFor(viewModel=>viewModel.Client.StateCode, new { @class = "form-control" })
                </div>
            </div>

            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(viewModel=>viewModel.Client.County)
                    @Html.TextBoxFor(viewModel=>viewModel.Client.County, new { @class = "form-control" })
                </div>
            </div>
        </div>



        <div class="row">
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(viewModel=>viewModel.Client.CountyFIPS)
                    @Html.TextBoxFor(viewModel=>viewModel.Client.CountyFIPS, new { @class = "form-control" })
                </div>
            </div>

            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(viewModel=>viewModel.Client.Zip)
                    @Html.TextBoxFor(viewModel=>viewModel.Client.Zip, new { @class = "form-control" })
                </div>
            </div>

            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(viewModel=>viewModel.Client.Email)
                    @Html.TextBoxFor(viewModel=>viewModel.Client.Email, new { @class = "form-control" })
                </div>
            </div>
        </div>


        <div class="row">
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(viewModel=>viewModel.Client.CellPhone)
                    @Html.TextBoxFor(viewModel=>viewModel.Client.CellPhone, new { @class = "form-control" })
                </div>
            </div>

            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(viewModel=>viewModel.Client.HomePhone)
                    @Html.TextBoxFor(viewModel=>viewModel.Client.HomePhone, new { @class = "form-control" })
                </div>
            </div>


            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(viewModel=>viewModel.Client.WorkPhone)
                    @Html.TextBoxFor(viewModel=>viewModel.Client.WorkPhone, new { @class = "form-control" })
                </div>
            </div>
        </div>



        <div class="row">

            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(viewModel=>viewModel.Client.ClientCategoryName, "Client Category") 
                    

                    


                    @*Does it matter to use a dynamically generated label if it has hard text? index radio button is regular*@

                    
                    @Html.DropDownListFor(viewModel=>viewModel.Client.ClientCategoryId,
                        new List<SelectListItem> {
                            new SelectListItem { Value = "1", Text = "Individual with Disability" },
                            new SelectListItem { Value = "2", Text = "Family Member" },
                            new SelectListItem { Value = "3", Text = "Professional / Representative of Community Living" },
                            new SelectListItem { Value = "4", Text = "Professional / Representative of Education" },
                            new SelectListItem { Value = "5", Text = "Professional / Representative of Technology" },
                            new SelectListItem { Value = "6", Text = "Professional / Representative of Employment" },
                            new SelectListItem { Value = "7", Text = "Professional / Representative of Health, Allied Health, Rehabilitative Services" }
                        }, new { @class = "form-control" })

               
                            @*<label for="ClientCategoryId">Client Category
                                <select class="form-control" id="ClientCategoryId" name="ClientCategoryId">

                                    <option value="1">Individual with Disability</option>
                                    <option value="2">Family Member</option>
                                    <option value="3">Professional / Representative of Community Living</option>
                                    <option value="4">Professional / Representative of Education</option>
                                    <option value="5">Professional / Representative of Technology</option>
                                    <option value="6">Professional / Representative of Employment</option>
                                    <option value="7">Professional / Representative of Health, Allied Health, Rehabilitative Services</option>
                                </select>
                            </label>*@
                </div>
            </div>


            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(viewModel=>viewModel.Client.LoanEligibility, "Loan Eligibility")
                    @Html.TextBoxFor(viewModel=>viewModel.Client.LoanEligibility, new { @class = "form-control" })
                </div>
            </div>

            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(viewModel=>viewModel.Client.Notes)
                    @Html.TextAreaFor(viewModel=>viewModel.Client.Notes, new { @class = "form-control" })
                </div>
            </div>
        </div>




    //If referencing the Model from inside the HTMLHelper it's first argument is automatically the Model of the page so it doesn't matter what you call the model (ie x, viewModel, etc)
    //If referencing the Model outside HTMLHelper you must use Model 


            @*foreach (var disabilityCategory in Model.DisabilityCategories) //ViewModel needed because of loop to list all types 
    {


                <label>@disabilityCategory.DisabilityType</label>

                //ActionMethod being posted to must have parameter name that matches this attribute name, since we are using the EditClientViewModel in this loop vs Model.Client.DisabilityIds, individually listed in the Method signature 
                <input type="checkbox" name="DisabilityIds" value="@disabilityCategory.DisabilityCategoryId"  
                       
                       @if (Model.Client.DisabilityIds.Contains(disabilityCategory.DisabilityCategoryId))
                       {                                                
                           <text> checked="checked" </text>
                       } />

    }*@



                <br/>            
                                                            // This posted value back, do I need viewModel?
                <div class="form-check">  
                    <label class="form-check-label">
                       
                        <input class="form-check-input" type="checkbox" name="DisabilityIds" value="1"
                
                        @if (Model.Client.DisabilityIds.Contains(1)) { <text> checked="checked" </text>  } />

                        Cognitive Impairment
                    </label>
                </div>





            <div class="text-left">
                <input class="btn btn-primary" type="submit" value="Edit Client" />
            </div>

            <br />

            <div class="btn btn-default">
                @Html.ActionLink("Cancel", "Index" )
            </div>

}
